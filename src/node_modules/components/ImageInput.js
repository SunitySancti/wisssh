import React, { useState, useCallback, useMemo, useRef, useEffect } from 'react'
import { useDropzone } from 'react-dropzone'

import { ImagePlaceholder } from 'components/Icon'
import { Icon } from 'components/Icon'
import { IconButton } from 'components/IconButton'

export const ImageInput = ({ register, setValue, control, name, imageInputRef, ...rest }) => {
    const [image, setImage] = useState(null);
    const imageURL = image ? URL.createObjectURL(image) : null;
    const imgRef = useRef(null);

    const onDrop = useCallback(acceptedFiles => setImage(acceptedFiles[0]),[]);

    const {
        getRootProps,
        getInputProps,
        isDragAccept,
        isDragReject
    } = useDropzone({ onDrop, accept: {'image/*': ['.jpeg', '.png']} });

    const deleteImage = (e) => {
        e?.preventDefault();
        e?.stopPropagation();
        setImage('');
        setValue('imageAspectRatio', '');
    }
    
    const setAspectRatio = () => {
        const aspectRatio = imgRef.current?.offsetWidth / imgRef.current?.offsetHeight
        setValue('imageAspectRatio', aspectRatio.toFixed(3))
    }

    useEffect(() => {setValue(name, `/images/${image?.path}`)},[image])

    // const deleteImage = () => setImage('');
    imageInputRef.current.deleteImage = deleteImage;

    // set dropzone styles:
    const classes = useMemo(() => {
        let result = '';
        if(isDragAccept) result += ' droppable hover';
        if(isDragReject) result += ' rejected';
        if(image) result += ' preview'
        else result += ' placeholder'
        return result;
    }, [
        isDragAccept,
        isDragReject,
        image,
    ]);

    // set render:
    const content = useMemo(() => {
        if(image) {
            return (
                <div className='container'>
                    <img
                        src={ imageURL }
                        alt={ image.name }
                        ref={ imgRef }
                        onLoad={ setAspectRatio }
                    />
                    <Icon
                        name='change'
                        className='transparent-icon change-btn'
                    />
                    <IconButton
                        icon='close'
                        className='transparent-icon close-btn'
                        onClick={ deleteImage }
                    />
                </div>
            );
        } else return (
            <>
                <ImagePlaceholder/>
                <div className='label'>
                    <Icon name='upload' size='30'/>
                    <span>Загрузите изображение</span>
                </div>
                <span>{
                    isDragAccept
                    ? 'Отпускай! :)'
                    : isDragReject
                    ? 'Поддерживаемые форматы: .jpeg .png'
                    : 'или перетащите файл сюда'
                }</span>
            </>
        );
    }, [
        image,
        imageURL,
        imgRef,
        isDragAccept,
        isDragReject
    ])

    return (
        <div
            className={'image-input' + classes}
            {...getRootProps()}
        >
            <input
                type='text'
                className='invis'
                {...register('imageAspectRatio')}
            />
            <input
                {...register(name)}
                {...getInputProps()}
                {...rest}
            />
            { content }
        </div>
    );
}