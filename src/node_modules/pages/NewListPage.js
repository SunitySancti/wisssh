import React, { useState, useLayoutEffect, useEffect } from 'react'
import { useForm } from 'react-hook-form'
import { useDispatch, useSelector } from 'react-redux'
import { useNavigate } from 'react-router'

import { TextInput } from 'components/TextInput'
import { DateSelect } from 'components/DateSelect'
import { IconButton } from 'components/IconButton'
import { Button } from 'components/Button'
import { generateId } from 'getters/idGen'
import { formatDateToArray } from 'getters'
import { putItems } from 'store/mCTLayoutSlice'
import { CardSelect } from 'components/CardSelect'
import { pushNewWishlist } from 'store/wishlistSlice'
import { updateWishesWithNewWishlist } from 'store/wishesSlice'

export const NewListPage = () => {
    // setting form:
    const currentUser = useSelector(state => state.users.current);
    const defaultValues = {
        id: generateId(),
        author: currentUser,
        title: '',
        description: '',
        date: formatDateToArray(new Date()),
        wishIds: [],
    }
    const {
        handleSubmit,
        control,
        register,
        setValue,
        getValues,
        reset,
        formState,
    } = useForm({
        mode: 'onChange',
        defaultValues
    });
    

    // form methods:
    const dispatch = useDispatch();
    const navigate = useNavigate()
    const wishlists = useSelector(state => state.wishlists.all)

    const onSubmit = (data, e) => {
        e.preventDefault();
        if(wishlists.find(list => list.id === data.id)) return;
        dispatch(pushNewWishlist(data));
        dispatch(updateWishesWithNewWishlist(data));
    }
    useEffect(() => {
        const newList = getValues();
        if(wishlists.find(list => list.id === newList.id)) {
            navigate(`/my-wishes/lists/${newList.id}`)
        }
    },[wishlists]);
    
    const cancelForm = (e) => {
        e.preventDefault();
        navigate(-1);
    }
    const resetForm = (e) => {
        e.preventDefault();
        reset(defaultValues);
    }

    // set page orientation:
    const [isLandscape, setIsLandscape] = useState(true);
    const setPageOrientation = () => setIsLandscape(window.innerWidth > 1080);

    useEffect(() => {
        setPageOrientation();
        window.addEventListener('resize', setPageOrientation);
        return () => window.removeEventListener('resize', setPageOrientation);
    },[]);
    
    // align labels:
    const [maxLabelWidth, setMaxLabelWidth] = useState(null);

    useEffect(() => {
        const labels = document.querySelectorAll('label.text');
        const labelWidths = [...labels].map(label => label?.offsetWidth);
        const maxWidth = labels.length
            ? Math.max(...labelWidths)
            : null;

        setMaxLabelWidth(maxWidth);
    });
    
    // bring wishes to MCT layout:
    const allWishes = useSelector(state => state.wishes.ofCurrentUser)
    const wishes = allWishes.filter(wish => wish.state === 'actual')
    useLayoutEffect(() => { dispatch(putItems( wishes )) })

    const Divider = () => <div className='divider'/>

    return (
        <div className='new-list-page'>
            <form onSubmit={handleSubmit(onSubmit)} >
                <div className='inputs'>
                    <input
                        className='invis'
                        type='text'
                        {...register('id')}
                    />
                    <input
                        className='invis'
                        type='text'
                        {...register('author')}
                    />
                    <div
                        className='line-container'
                        style={ isLandscape
                            ? { flexFlow: 'row nowrap'}
                            : { flexFlow: 'column'}
                        }
                    >
                        <TextInput
                            name='title'
                            register={register}
                            placeholder='Придумайте запоминающееся название'
                            label='Название'
                            labelWidth={maxLabelWidth}
                            required
                            formState={formState}
                        /> 
                        <DateSelect
                            name='date'
                            control={control}
                            label='Дата события'
                            labelWidth={ isLandscape ? null : maxLabelWidth }
                            required
                            formState={formState}
                        />
                    </div> 
                    <TextInput
                        name='description'
                        register={register}
                        placeholder='Что писать? Начните с приветствия. Опишите, каким вы хотели бы видеть мероприятие, что планируется — поход в бар, домашние посиделки или, может быть, что-то экзотичное. Если есть пожелания для гостей — что надеть или взять с собой — укажите их'
                        label='Описание'
                        labelWidth={maxLabelWidth}
                        multiline 
                    />
                </div>
                <Divider/> 
                <CardSelect
                    name='wishIds'
                    control={control}
                    options={wishes}
                />
                <Divider/>
                <div className='line-container btn-group'>
                    <IconButton
                        icon='clear'
                        onClick={resetForm}
                    />
                    <IconButton
                        icon='cancel'
                        onClick={cancelForm}
                    />
                    <Button
                        type='submit'
                        kind='primary'
                        text='Сохранить желание'
                        leftIcon='ok'
                        round
                        onClick={handleSubmit(onSubmit)}
                        disabled={!formState.isValid || formState.isSubmitting || formState.isSubmitted}
                    />
                </div>
            </form>
        </div> 
    )
}