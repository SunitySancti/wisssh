import React, { useState, useEffect, useRef } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useForm } from 'react-hook-form'
import { useNavigate } from 'react-router'

import { ImageInput } from 'components/ImageInput'
import { TextInput } from 'components/TextInput'
import { SelectBox } from 'components/SelectBox'
import { StarRating } from 'components/StarRating'
import { ToggleInput } from 'components/ToggleInput'
import { Button } from 'components/Button'
import { IconButton } from 'components/IconButton'
import { generateId } from 'getters/idGen'
import { pushNewWish } from 'store/wishesSlice'
import { updateWishlistsWithNewWish } from 'store/wishlistSlice'

export const NewWishPage = () => {
    // setting form:
    const currentUser = useSelector(state => state.users.current);
    const defaultValues = {
        id: generateId(),
        author: currentUser,
        title: '',
        description: '',
        image: '',
        imageAspectRatio: 1,
        external: '',
        price: '',
        currency: 'rouble',
        stars: 0,
        state: 'actual',
        wishlistIds: [],
    }
    const {
        handleSubmit,
        register,
        setValue,
        getValues,
        reset,
        control,
        formState,
    } = useForm({
        mode: 'onChange',
        defaultValues
    });

    const statusOptions = [
        { value: 'actual', label: 'Актуально' },
        { value: 'completed', label: 'Исполнено' }
    ];
    const currencyOptions = [
        {value: 'rouble', label: '₽'},
        {value: 'euro', label: '€'},
        {value: 'dollar', label: '$'},
    ];
    const currentUserWishlists = useSelector(state => state.wishlists.ofCurrentUser);
    const wishlistOptions = [
        ...currentUserWishlists.map(list => ({
                value: list.id,
                label: list.title
        }))
    ];

    //form methods:
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const wishes = useSelector(state => state.wishes.all);
    const imageInputRef = useRef({});

    const onSubmit = (data, e) => {
        e.preventDefault();
        if(wishes.find(wish => wish.id === data.id)) return;
        dispatch(pushNewWish(data));
        dispatch(updateWishlistsWithNewWish(data));
    }
    useEffect(() => {
        const newWish = getValues();
        if(wishes.find(wish => wish.id === newWish.id)) {
            navigate(`/my-wishes/items/actual/${newWish.id}`)
        }
    },[wishes])

    const cancelForm = (e) => {
        e.preventDefault();
        navigate(-1);
    }
    const resetForm = (e) => {
        e.preventDefault();
        reset(defaultValues);
        imageInputRef.current.deleteImage();
    }

    // set page orientation:
    const [isLandscape, setIsLandscape] = useState(true)
    const setPageOrientation = () => setIsLandscape(window.innerWidth > 1280);

    useEffect(() => {
        setPageOrientation();
        window.addEventListener('resize', setPageOrientation)
        return () => window.removeEventListener('resize', setPageOrientation)
    },[]);
    
    // align labels:
    const [maxLabelWidth, setMaxLabelWidth] = useState(null);

    useEffect(() => {
        const labels = document.querySelectorAll('label.text');
        const labelWidths = [...labels].map(label => label?.offsetWidth);
        const maxWidth = labels.length ? Math.max(...labelWidths) : null;

        setMaxLabelWidth(maxWidth);
    });
    

    return (
        <div className='new-wish-page'>
            <form
                className={ isLandscape ? 'landscape' : 'portrait' }
                onSubmit={handleSubmit(onSubmit)}
            >
                <input
                    className='invis'
                    type='text'
                    {...register('id')}
                />
                <input
                    className='invis'
                    type='text'
                    {...register('author')}
                />
                <div className='left'>
                    <ImageInput
                        name='image'
                        register={register}
                        setValue={setValue}
                        imageInputRef={imageInputRef}
                    />
                </div>
                <div className='right'>
                    <TextInput
                        name='title'
                        register={register}
                        placeholder='Таинственный артефакт'
                        label='Название'
                        labelWidth={maxLabelWidth}
                        required
                        formState={formState}
                    />
                    <TextInput
                        name='description'
                        register={register}
                        placeholder='Отметьте моменты, которые вам важны. Чем точнее вы опишете желание, тем проще друзьям будет его исполнить'
                        label='Описание'
                        labelWidth={maxLabelWidth}
                        multiline
                        
                    />
                    <TextInput
                        name='external'
                        register={register}
                        placeholder='https://magicstore.com/goods/mysterious-artefact'
                        label='Ссылка'
                        labelWidth={maxLabelWidth}
                    />
                    <div className='line-container'>
                        <TextInput
                            name='price'
                            register={register}
                            placeholder='4200'
                            label='Цена'
                            labelWidth={maxLabelWidth}
                        />
                        <ToggleInput
                            name='currency'
                            control={control}
                            options={currencyOptions}
                        />
                    </div>
                    <div className='line-container'>
                        <SelectBox
                            name='state'
                            control={control}
                            options={statusOptions}
                            placeholder='Актуально'
                            label='Статус'
                            labelWidth={maxLabelWidth}
                        />
                        <StarRating
                            name='stars'
                            control={control}
                            maxStars={3}
                            starBoxSize={4}
                        />
                    </div>
                    <SelectBox
                        name='wishlistIds'
                        control={control}
                        isMulti
                        options={wishlistOptions}
                        placeholder='Можно сразу добавить в вишлисты'
                        label='Вишлисты'
                        labelWidth={maxLabelWidth}
                    />
                    <div className='line-container btn-group'>
                        <IconButton
                            icon='clear'
                            onClick={resetForm}
                        />
                        <IconButton
                            icon='cancel'
                            onClick={cancelForm}
                        />
                        <Button
                            type='submit'
                            kind='primary'
                            text='Сохранить желание'
                            leftIcon='ok'
                            round
                            onClick={handleSubmit(onSubmit)}
                            disabled={!formState.isValid || formState.isSubmitting || formState.isSubmitted}
                        />
                    </div>
                </div>
            </form>
        </div>
    );
}