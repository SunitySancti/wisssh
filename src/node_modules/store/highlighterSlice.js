import { createSlice, current } from '@reduxjs/toolkit'
import { last } from 'ramda';

const highlighterSlice = createSlice({
    name: 'highLighter',
    initialState: {
        inAppHeaderCoords: {
            x: 0,
            y: 0,
            width: 0,
            height: 11,
        },
        inModeToggleCoords: {
            x: 3,
            y: 3,
            width: 36,
            height: 36,
        },
        inNavBarCoords: {
            x: 27,
            y: 36,
            width: 114,
            height: 6,
            last: undefined,
        },
        descriptionPointerCoords: {
            x: 69,
        },
    },
    reducers: {
        setHighlighterCoordsInAppHeader(state) {
            const activeTab = document.querySelector('.header-nav.active');
            if(!activeTab) return state;

            const activeTabCoords = activeTab.getBoundingClientRect();

            state.inAppHeaderCoords.x = Math.floor(activeTabCoords.x);
            state.inAppHeaderCoords.y = Math.floor(activeTabCoords.y) + 36;
            state.inAppHeaderCoords.width = Math.ceil(activeTabCoords.width);
        },
        setHighlighterCoordsInModeToggle(state) {
            const activeModeButton = document.querySelector('.toggle-button.active');
            if(!activeModeButton) return state;

            state.inModeToggleCoords.x = activeModeButton.offsetLeft + 3;
        },
        setLastActiveOptionCoords(state) {
            const activeOption = document.querySelector('.nav.option.active');
            state.inNavBarCoords.last = {
                offsetLeft: activeOption.offsetLeft,
                offsetWidth: activeOption.offsetWidth,
            };
            console.log('ПЫЩЬ! ', current(state).inNavBarCoords.last)
        },
        setHighlighterCoordsInNavBar(state) {
            const next = document.querySelector('.nav.option.active');
            const last = current(state).inNavBarCoords.last;
            if(!next) return state;

            if(!last) {
                state.inNavBarCoords.x = next.offsetLeft + 16;
                state.inNavBarCoords.width = next.offsetWidth - 33;
            }

            if(last && next.offsetLeft >= last.offsetLeft) {
                state.inNavBarCoords.width = next.offsetLeft - last.offsetLeft + next.offsetWidth - 33;
            }

            if(last && next.offsetLeft < last.offsetLeft) {
                console.log('<Меньше>',last, {offsetLeft: next.offsetLeft, offsetWidth: next.offsetWidth,})
                state.inNavBarCoords.x = next.offsetLeft + 16;
                state.inNavBarCoords.width = last.offsetWidth + last.offsetLeft - next.offsetLeft - 33;
            }

            state.inNavBarCoords.last = {
                offsetLeft: next.offsetLeft,
                offsetWidth: next.offsetWidth,
            };
        },
        animationSecondStep(state) {
            const coords = document.querySelector('.nav.option.active');
            if(!coords) return state;
            state.inNavBarCoords.x = coords.offsetLeft + 16;
            state.inNavBarCoords.width = coords.offsetWidth - 33;
        },
        setDescriptionPointerCoords(state) {
            const offset = document.querySelector('.info-field .user').offsetLeft - 11;
            if(!offset) return state;

            state.descriptionPointerCoords.x = offset;
        }
    },
});

export const {
    setHighlighterCoordsInAppHeader,
    setHighlighterCoordsInModeToggle,
    setLastActiveOptionCoords,
    setHighlighterCoordsInNavBar,
    animationSecondStep,
    setDescriptionPointerCoords,
} = highlighterSlice.actions;

export default highlighterSlice.reducer;