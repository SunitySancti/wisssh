import { createSlice, current } from '@reduxjs/toolkit'

const sliderSlice = createSlice({
    name: 'sliders',
    initialState: {
        leftSectionSlider: {
            x: -159,
            y: 36,
            width: 148,
            height: 11,
        },
        rightSectionSlider: {
            x: 209,
            y: 36,
            width: 151,
            height: 11,
        },
        modeSlider: {
            x: 3,
            y: 3,
            width: 36,
            height: 36,
        },
        navSlider: {
            x: 27,
            y: 36,
            width: 114,
            height: 6,
            lastActiveOption: undefined,
        },
        descriptionPointer: {
            x: 69,
        },
    },
    reducers: {
        switchSectionSlider(state) {
            const activeSection = document.querySelector('.section.active');
            if(!activeSection) return state;
            
            const rightSection = document.querySelector('.section.my-invites');
            const switchToRight = activeSection === rightSection;

            const activeSectionCoords = activeSection.getBoundingClientRect();
            const logoCoords = document.querySelector('.logo-btn').getBoundingClientRect();
            const dotSize = 44;

            if(switchToRight) {
                state.leftSectionSlider = {
                    x: dotSize / 2,
                    y: Math.round(logoCoords.height / 2 - dotSize / 2 + 6),
                    width: dotSize,
                    height: dotSize,
                };
                state.rightSectionSlider = {
                    x: Math.round(logoCoords.width + 11),
                    y: Math.round(activeSectionCoords.y + 26),
                    width: Math.round(activeSectionCoords.width),
                    height: 11,
                };
            } else {
                state.leftSectionSlider = {
                    x: Math.round(- activeSectionCoords.width - 11),
                    y: Math.round(activeSectionCoords.y + 26),
                    width: Math.round(activeSectionCoords.width),
                    height: 11,
                };
                state.rightSectionSlider = {
                    x: Math.round(logoCoords.width - 3 * dotSize / 2),
                    y: Math.round(logoCoords.height / 2 - dotSize / 2 + 2),
                    width: dotSize,
                    height: dotSize,
                };
            }
        },
        switchModeSlider(state) {
            const activeModeButton = document.querySelector('.toggle-button.active');
            if(!activeModeButton) return state;

            state.modeSlider.x = activeModeButton.offsetLeft + 3;
        },
        stretchNavSlider(state) {
            const next = document.querySelector('.nav.option.active');
            const last = current(state).navSlider.lastActiveOption;
            if(!next) return state;

            if(!last) {
                state.navSlider.x = next.offsetLeft + 16;
                state.navSlider.width = next.offsetWidth - 33;
            }

            if(last && next.offsetLeft >= last.offsetLeft) {
                state.navSlider.width = next.offsetLeft - last.offsetLeft + next.offsetWidth - 33;
            }

            if(last && next.offsetLeft < last.offsetLeft) {
                state.navSlider.x = next.offsetLeft + 16;
                state.navSlider.width = last.offsetWidth + last.offsetLeft - next.offsetLeft - 33;
            }

            state.navSlider.lastActiveOption = {
                offsetLeft: next.offsetLeft,
                offsetWidth: next.offsetWidth,
            };
        },
        placeNavSlider(state) {
            const coords = document.querySelector('.nav.option.active');
            if(!coords) return state;
            state.navSlider.x = coords.offsetLeft + 16;
            state.navSlider.width = coords.offsetWidth - 33;
        },
        setDescriptionPointer(state) {
            const offset = document.querySelector('.info-field .user').offsetLeft - 11;
            if(!offset) return state;

            state.descriptionPointer.x = offset;
        }
    }
});

export const {
    switchSectionSlider,
    switchModeSlider,
    stretchNavSlider,
    placeNavSlider,
    setDescriptionPointer,
} = sliderSlice.actions;

export default sliderSlice.reducer;