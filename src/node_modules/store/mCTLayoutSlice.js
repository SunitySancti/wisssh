import { createSlice, current } from '@reduxjs/toolkit'

import { styleVars } from 'containers/MultiColumnTapeLayout'

const multiColumnTapeLayoutSlice = createSlice({
    name: 'mCTLayout',
    initialState: {
        columns: [],
        columnsQty: 0,
        itemsWaitList: []
    },
    reducers: {
        fillWaitList(state,{ payload }) {
            state.itemsWaitList = payload
        },
        setColumnsQty(state) {
            const layoutWidth = document.querySelector('.mct-layout').clientWidth;
            const { outerSpacing, innerSpacing, columnMinWidth } = styleVars;

            const columnsQty = Math.floor((layoutWidth - 2 * outerSpacing + innerSpacing) / (columnMinWidth + innerSpacing));

            state.columnsQty = columnsQty;
        },
        resetColumns(state) {
            const columnsQty = current(state).columnsQty;
            state.columns = [];
            for (let i=0; i<columnsQty && current(state).itemsWaitList.length; i++) {
                state.columns.push( [state.itemsWaitList.shift()] );
            }
        },
        takeItemToRender(state) {
            const columnHeights = [...document.querySelectorAll('.mct-column')].map(col => col.clientHeight);
            const shortestColumnId = columnHeights.indexOf(Math.min(...columnHeights));

            if (shortestColumnId === -1 || !current(state).itemsWaitList.length) return state;

            state.columns[ shortestColumnId ].push( state.itemsWaitList.shift() );
        }
    }
})

export const {
    fillWaitList,
    setColumnsQty,
    resetColumns,
    takeItemToRender
} = multiColumnTapeLayoutSlice.actions;

export default multiColumnTapeLayoutSlice.reducer;