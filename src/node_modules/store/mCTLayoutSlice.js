import { createSlice, current } from '@reduxjs/toolkit'

import { styleVars } from 'containers/MultiColumnTapeLayout'

const multiColumnTapeLayoutSlice = createSlice({
    name: 'mCTLayout',
    initialState: {
        columns: [],
        columnsQty: 0,
        columnWidth: 0,
        items: [],
        itemsRenderList: [],
    },
    reducers: {
        clearItems(state) {
            state.items = [];
        },
        putItems(state, { payload }) {
            console.log('puItems fired');
            state.items = [];
            state.items.push(...payload);
            console.log(current(state).items);
        },
        fillRenderList(state) {
            console.log('fillRenderList fired')
            state.itemsRenderList = [];
            state.itemsRenderList.push(...current(state).items);
            console.log('renderList is: ',current(state).itemsRenderList)
        },
        takeItemToRender(state) {
            console.log('takeItemToRender fired')
            const columnHeights = [...document.querySelectorAll('.mct-column')].map(col => col.clientHeight);
            const shortestColumnId = columnHeights.indexOf(Math.min(...columnHeights));

            if (shortestColumnId === -1 || !current(state).itemsRenderList.length) return state;

            state.columns[ shortestColumnId ].push( state.itemsRenderList.shift() );
        },
        setColumnsQtyAndWidth(state) {
            console.log('setColumnsQtyAndWidth fired')
            const layoutWidth = document.querySelector('.mct-layout').clientWidth;
            const { outerSpacing, innerSpacing, columnMinWidth } = styleVars;

            const columnsQty = Math.floor((layoutWidth - 2 * outerSpacing + innerSpacing) / (columnMinWidth + innerSpacing));
            const columnWidth = Math.round(((layoutWidth - 2 * outerSpacing + innerSpacing) / columnsQty) - innerSpacing);

            state.columnsQty = columnsQty;
            state.columnWidth = columnWidth;
        },
        resetColumns(state) {
            console.log('resetColumns fired')
            const columnsQty = current(state).columnsQty;
            state.columns = [];
            for (let i=0; i<columnsQty && current(state).itemsRenderList.length; i++) {
                state.columns.push( [state.itemsRenderList.shift()] );
            }
        },
    }
})

export const {
    clearItems,
    putItems,
    fillRenderList,
    takeItemToRender,
    setColumnsQtyAndWidth,
    resetColumns,
} = multiColumnTapeLayoutSlice.actions;

export default multiColumnTapeLayoutSlice.reducer;