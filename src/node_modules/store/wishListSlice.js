import { createSlice, createAsyncThunk, current } from '@reduxjs/toolkit'
import * as R from 'ramda'

import { wishLists as wishListsApi } from 'api/mockWishlists'

export const fetchWishLists = createAsyncThunk(
    'wishLists/fetchWishLists',
    async function() {
        const response = await fetch();
        const data = await response.json();
        return data;
    }
)

const allInitial = R.indexBy(R.prop('id'), wishListsApi);
console.log('Wish lists initial state is: ', allInitial)

const wishListSlice = createSlice({
    name: 'wishLists',
    initialState: {
        all: allInitial,
        status: null,
        error: null,
        filterWishLists: []
    },
    reducers: {
        filterWishLists(state) {
            state.filteredWishLists = [...wishLists];
        },
    },
    extraReducers: {
        [fetchWishLists.pending]: (state) => {
            state.status = 'loading';
            state.error = null;
            console.log(current(state))
        },
        [fetchWishLists.fulfilled]: (state,{ payload }) => {
            state.status = 'resolved';
            state.all = payload;
            console.log(current(state))
        },
        [fetchWishLists.rejected]: (state, action) => {},
    }
});

export const { filterWishLists } = wishListSlice.actions;

export default wishListSlice.reducer;