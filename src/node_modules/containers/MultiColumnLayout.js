import React, { useEffect, useState, useRef } from 'react'
import { useLocation } from 'react-router'

export const MultiColumnLayout = ({ Card, data, ...cardProps }) => {
    if(!data || !Card) return <div>No Card-component or [data] was provided</div>

    // state:

    const layoutRef = useRef(null);
    const location = useLocation().pathname;

    const [items, setItems] = useState([]);
    const [columnsQty, setColumnsQty] = useState(0);
    const [itemsRest, setItemsRest] = useState([]);
    const [columnedData, setColumnedData] = useState([]);
    const [opacity, setOpacity] = useState(0.5);

    // styles:

    const gap = 22;
    const minWidth = 270;
    const maxWidth = 400;

    const containerStyles = {
        display: 'flex',
        flexFlow: 'row nowrap',
        width: '100%',
        gap: `${gap}px`,
    };
    const columnStyles = {
        display: 'flex',
        flexFlow: 'column nowrap',
        width: '100%',
        height: 'fit-content',
        gap: `${gap}px`,
        maxWidth: `${maxWidth}px`,
        opacity: opacity,
        transition: 'opacity 0.25s ease-in',
    };
    
    // methods:

    const resetState = () => {
        setItems(data);
        setColumnsQty(0);
        setItemsRest([]);
        setColumnedData([]);
        setOpacity(0.5);
    }

    const updateColumnsQty = () => {
        const layoutWidth = layoutRef.current?.clientWidth;
        const columnsQtyLimit = Math.floor((layoutWidth - 2 * gap) / (minWidth + gap));
        setColumnsQty(Math.min(columnsQtyLimit, items.length));
    }

    const initColumns = () => {
        let firstCards = [];
        for (let i=0; i<columnsQty; i++) {
            firstCards.push([ items[i] ]);
        }
        setColumnedData(firstCards);
        setItemsRest([...items].slice(columnsQty)); 
    }

    const pushItemToShortColumn =  () => {
        if (itemsRest.length === items.length) return;
        if(!itemsRest.length) { setOpacity(1); return };

        const columns = [...layoutRef.current?.childNodes].filter(node => node.className === 'column');
        if(!columns.length) return;
        columns.forEach(elem => {elem.style.maxWidth = 'none'})
        
        const columnHeights = columns?.map(col => col.clientHeight);
        const shortColumnId = columnHeights.indexOf(Math.min(...columnHeights));
        const result = columnedData.slice();
        result[ shortColumnId ]?.push(itemsRest[0]);
 
        setColumnedData(result);
        setItemsRest([...itemsRest].slice(1));
    }

    // component life cycle:

    useEffect(() => {
        resetState();
    },[location]);

    useEffect(() => {
        updateColumnsQty(); 
        window.addEventListener('resize', updateColumnsQty);
        return () => {
            window.removeEventListener('resize', updateColumnsQty);
            setOpacity(0);
        }
    },[items]);

    useEffect(() => {
        columnsQty && !!items.length && initColumns();
    },[columnsQty]);

    useEffect(() => {
        setTimeout(() => pushItemToShortColumn(), 1) // trick to fix card height loading bug
    },[itemsRest]);

    return (
        <div
            style={containerStyles}
            ref={layoutRef}
        >
            { columnedData && !!columnedData.length && columnedData.map( (column, index) =>
                <div
                    style={columnStyles}
                    key={index}
                    className='column'
                >
                    { column.map( (item, index) =>
                        <Card
                            key={index}
                            data={item}
                            {...cardProps}
                        />
                    )}
                </div>
            )}
        </div>
    );
} 