import React, { useState, useRef } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { useNavigate } from 'react-router-dom'

import { User } from 'components/User'
import { WishlistLinePointer } from 'components/Icon'
import { DropDown } from 'components/DropDown'
import { deleteWishlistById } from 'store/wishlistSlice'

export const WishlistLine = ({ wishlist, onClick, onWishlistPage, style }) => {
    const wl = wishlist;
    const dispatch = useDispatch();
    const navigate = useNavigate();

    const TimeInfo = () => {
        if(!wl.date) return null;

        const eventTS = new Date( wl.date[2], wl.date[1] - 1, wl.date[0]).getTime();
        const nowTS = Date.now();
        const daysToEvent = Math.ceil((eventTS - nowTS)/86400000)

        //проверка на число:
        if(!(String(parseInt(daysToEvent, 10)) === String(daysToEvent))) return null;

        if((daysToEvent > 2) && (daysToEvent < 7)) {
            const lastNum = parseInt(daysToEvent.toString().at(-1));
            const ending = (lastNum < 5) ? 'дня' : 'дней';

            return (
                <div className='time-info future'>
                    <span className='small'>через</span>
                    <span className='big'>{ daysToEvent }</span>
                    <span className='small'>{ ending }</span>
                </div>
            );
        } else if(daysToEvent === 7) {
            return (
                <div className='time-info future'>
                    <span className='small'>Через неделю</span>
                </div>
        )} else if((daysToEvent < 0) || (daysToEvent > 7)) {
            const status = daysToEvent < 0
                ? 'past' : 'future'

            return (
                <div className={`time-info ${status}`}>
                    <span className='small'>{ wl.date.join('.') }</span>
                </div>
        )} else {
            const text = daysToEvent === 0
                ? 'Сегодня' : daysToEvent === 1
                ? 'Завтра' : 'Послезавтра'

            return (
                <div className='time-info soon'>
                    <span className='big'>{ text }</span>
                </div>
            );
        }
    }

    // set dropdown:
    const currentUser = useSelector(state => state.users.current);

    function deleteWishlist(e) {
        e.stopPropagation();
        dispatch(deleteWishlistById(wl.id));
        const prefix = wl.author === currentUser
            ? '/my-wishes'
            : '/my-invites'
        navigate(`${prefix}/lists/`);
    }

    const menuButton = {
        icon: 'kebap',
        size: 4
    }
    const menuOptions = [
        { icon: 'edit', text: 'Редактировать' },
        { icon: 'delete', text: 'Удалить вишлист', onClick: deleteWishlist }
    ]

    const [isMenuVisible, setIsMenuVisible] = useState(false);

    return (
        <div
            className={onWishlistPage ? 'wishlist-line selected on-wishlist-page' : 'wishlist-line'}
            style={ style }
            id={ wl.id }
            onClick={ onClick }
            onMouseEnter={() => setIsMenuVisible(true)}
            onMouseLeave={() => setIsMenuVisible(false)}
        >
            <User
                isPicOnly={ true }
                picSize='6'
                userName={ wl.author }
            />
            <div className='title-container'>
                <WishlistLinePointer/>
                <div className='title'>{ wl.title }</div>
            </div>
            <span className='description'>
                 { wl.description }
            </span>
            <TimeInfo/>
            { isMenuVisible && <DropDown
                button={menuButton}
                options={menuOptions}
            />}
        </div>
    );
}