import React, { useEffect, useLayoutEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { createUseStyles } from 'react-jss'

import { WishCard } from 'components/WishCard'
import { fetchWishes } from 'store/wishesSlice'
import {
    fillWaitList,
    setColumnsQty,
    resetColumns,
    takeItemToRender
} from 'store/mCTLayoutSlice'

export const styleVars = {
    outerSpacing: 0,
    innerSpacing: 22,
    columnMinWidth: 250,
    columnMaxWidth: 330
}

const useStyles = createUseStyles({
    container: {
        display: 'flex',
        width: '100%',
        padding: `0 ${styleVars.outerSpacing}px`,
    },
    column: {
        width: '100%',
        maxWidth: `${styleVars.columnMaxWidth}px`,
        height: 'fit-content',
        marginLeft: `${styleVars.innerSpacing}px`
    },
    firstColumn: {
        marginLeft: '0'
    },
    item: {
        marginBottom: `${styleVars.innerSpacing}px`
    }
})

export const MultiColumnTapeLayout = () => {
    const dispatch = useDispatch();
    const loadWishes = () => dispatch(fetchWishes());
    const updateItemsWaitList = () => dispatch(fillWaitList( wishes.all ));
    const updateColumnsQty = () => dispatch(setColumnsQty());
    const initializeColumns = () => dispatch(resetColumns());
    const takeItemToShortestColumn = () => dispatch(takeItemToRender());
    
    const wishes = useSelector(state => state.wishes)
    const layout = useSelector(state => state.mCTLayout)

    const classes = useStyles();

    useEffect(() => {
        loadWishes();
        updateColumnsQty();
        window.addEventListener('resize', updateColumnsQty);
        return () => { window.removeEventListener('resize', updateColumnsQty) }
    },[])

    useLayoutEffect(() => {
        updateItemsWaitList();
        initializeColumns();
    },[layout.columnsQty, wishes.status])

    useEffect(() => {
        takeItemToShortestColumn();
    },[layout.itemsWaitList])

    return (
        <div className={classes.container + ' mct-layout'}>
            {layout.columns.map((column, index) => 
                <div key={index} className={ classes.column + ' mct-column ' + (!index && classes.firstColumn) }>
                    {column.map((item, index) =>
                        <WishCard wish={ item } key={ index } className={ classes.item }/>
                     )}
                </div> 
             )}
        </div>
    )
}