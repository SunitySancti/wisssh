import React, { useEffect, useLayoutEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'
import { createUseStyles } from 'react-jss'

import {
    clearItems,
    fillRenderList,
    takeItemToRender,
    setColumnsQtyLimitAndWidth,
    setColumnWidth,
    resetColumns,
} from 'store/mCTLayoutSlice'

export const styleVars = {
    outerSpacing: 0,
    innerSpacing: 22,
    columnMinWidth: 270,
    columnMaxWidth: 360
}

const useStyles = createUseStyles({
    container: {
        display: 'flex',
        flexFlow: 'row nowrap',
        width: '100%',
        padding: `0 ${styleVars.outerSpacing}px`,
        gap: `${styleVars.innerSpacing}px`,
    },
    column: {
        display: 'flex',
        flexFlow: 'column nowrap',
        width: '100%',
        height: 'fit-content',
        gap: `${styleVars.innerSpacing}px`,
    },
})

//multi-column tape layout

export const MCTLayout = ({ Component, ...rest }) => {
    const { value } = rest;
    const dispatch = useDispatch();
    const updateItemsRenderList = () => dispatch(fillRenderList());
    const takeItemToShortestColumn = () => dispatch(takeItemToRender());
    const updateColumnParams = () => dispatch(setColumnsQtyLimitAndWidth());
    const updateColumnWidth = () => dispatch(setColumnWidth());
    const initializeColumns = () => dispatch(resetColumns());
    
    const layout = useSelector(state => state.mCTLayout);
    const classes = useStyles();

    useEffect(() => {
        updateColumnParams();
        updateColumnWidth();
        window.addEventListener('resize', () => {
            updateColumnParams();
            updateColumnWidth();
        });
        return () => {
            window.removeEventListener('resize', updateColumnParams);
            window.removeEventListener('resize', updateColumnWidth);
            dispatch(clearItems());
        }
    },[]);

    useLayoutEffect(() => {
        updateColumnWidth();
    },[layout.columns.length])

    useLayoutEffect(() => {
        updateItemsRenderList();
        initializeColumns();
    },[layout.columnsQtyLimit, layout.items]);

    useEffect(() => {
        takeItemToShortestColumn();
    },[layout.itemsRenderList]);

    return (
        <div className={classes.container + ' mct-layout'}>
            {layout.columns.map((column, index) => 
                <div key={index} className={ classes.column + ' mct-column' }>
                    {column.map((item, index) =>
                        <Component
                            key={index}
                            data={item}
                            selected={value.includes(item.id)}
                            {...rest}
                        />
                     )}
                </div> 
             )}
        </div>
    )
}