import React, { useEffect, useLayoutEffect, useState } from 'react'
import { NavLink, useParams } from 'react-router-dom'
import { Outlet, useLocation } from 'react-router'
import { useDispatch } from 'react-redux'

import { ModeToggle } from 'components/ModeToggle'
import { Highlighter } from 'components/Highlighter'
import { IconButton } from 'components/IconButton'
import { highlightBreadCrumbStart, highlightBreadCrumbFinish } from 'store/highlighterSlice'
import { getWishById, getWishlistById } from 'getters'


export const NavBar = () => {
    const location = useLocation().pathname.split('/').slice(1,3).join('/')

    const { wishlistId, wishId } = useParams();
    const wishlist = getWishlistById(wishlistId);
    const wish = getWishById(wishId);
    const wishlistName = wishlist && wishlist.title;
    const wishName = wish && wish.title;

    const Option = ({ to, children, isBreadCrumb }) => {
        return (
            <NavLink
                to={ to }
                className='nav option'
                end={ isBreadCrumb }
            >
                { children }
            </NavLink>
        );
    }
    const Slash = () => <div className='nav'>/</div>

    let BreadCrumbs;
    switch (location) {
        case 'my-wishes/items':
            BreadCrumbs = () => (
                <div className='bread-crumbs'>
                    <Highlighter location='navbar'/>
                    <Option to='/my-wishes/items/actual'>Актуальные</Option>
                    <Option to='/my-wishes/items/completed'>Исполненные</Option>
                    <Option to='/my-wishes/items/all'>Все</Option>
                </div>
            );
            break;
        case 'my-wishes/lists':
            BreadCrumbs = () => (
                <div className='bread-crumbs'>
                    <Highlighter location='navbar'/>
                    <Option to='/my-wishes/lists/' isBreadCrumb={ true }>Вишлисты</Option>
                    
                    { wishlistId && <Slash/> }
                    { wishlistId &&
                    <Option to={`/my-wishes/lists/${wishlistId}`} isBreadCrumb={ true }>{ wishlistName }</Option>}
                    
                    { wishId && <Slash/> }
                    { wishId &&
                    <Option to={`/my-wishes/lists/${wishlistId}/${wishId}`} isBreadCrumb={ true }>{ wishName }</Option>}
                </div>
            );
            break;
        case 'my-invites/items':
            BreadCrumbs = () => (
                <div className='bread-crumbs'>
                    <Highlighter location='navbar'/>
                    <Option to='/my-invites/items/reserved'>Зарезервированные</Option>
                    <Option to='/my-invites/items/completed'>Подаренные</Option>
                    <Option to='/my-invites/items/all'>Все</Option>
                </div>
            );
            break;
        case 'my-invites/lists':
            BreadCrumbs = () => (
                <div className='bread-crumbs'>
                    <Highlighter location='navbar'/>
                    <Option to='/my-invites/lists/' isBreadCrumb={ true }>Вишлисты</Option>

                    { wishlistId && <Slash/> }                    
                    { wishlistId &&
                    <Option to={`/my-invites/lists/${wishlistId}`} isBreadCrumb={ true }>{ wishlistName }</Option>}
                    
                    { wishId && <Slash/> }
                    { wishId &&
                    <Option to={`/my-invites/lists/${wishlistId}/${wishId}`} isBreadCrumb={ true }>{ wishName }</Option>}
                </div>
            );
            break;
        default:
            break;
    }
    
    // place highlighters on their positions:

    const dispatch = useDispatch();
    const setTransitions = () => { document.querySelector('.bread-crumbs .highlighter')?.classList.add('animated-short') }
    const clearTransitions = () => { document.querySelector('.bread-crumbs .highlighter')?.classList.remove('animated-short') }

    useLayoutEffect(() => {
        setTransitions();
        dispatch(highlightBreadCrumbStart());
        setTimeout(() => dispatch(highlightBreadCrumbFinish()), 300);
    });

    useLayoutEffect(() => {
        clearTransitions();
        dispatch(highlightBreadCrumbFinish());
    },[location]);

    // make paddings adaptive with changing css variable:

    const widthBreakpoints = {
        min: 864,
        max: 1040
    };
    const paddingBreakpoints = {
        min: 44,
        max: 110
    };
    const setPadding = () => {
        const appBodyWidth = document.querySelector('.app-body')?.clientWidth;

        if(appBodyWidth <= widthBreakpoints.min) {
            document.documentElement.style.setProperty('--app-body-padding', paddingBreakpoints.min + 'px');
        }
        else if(appBodyWidth >= widthBreakpoints.max) {
            document.documentElement.style.setProperty('--app-body-padding', paddingBreakpoints.max + 'px');
        }
        else {
            const paddingRange = paddingBreakpoints.max - paddingBreakpoints.min;
            const widthRange = widthBreakpoints.max - widthBreakpoints.min;
            const padding = paddingBreakpoints.min + (appBodyWidth - widthBreakpoints.min) * paddingRange / widthRange;

            document.documentElement.style.setProperty('--app-body-padding', padding + 'px');
        }
    }

    useEffect(() => {
        setPadding();
        window.addEventListener('resize', setPadding);
        return (() => {
            window.removeEventListener('resize', setPadding);
        })
    },[])

    // catch navbar overflow:

    const nav = document.querySelector('.nav-bar');

    const [overflow, setOverflow] = useState(false);
    const [scrollPosition, setScrollPosition] = useState(0);

    const isLeftOverflow = scrollPosition <= 0;
    const isRightOverflow = scrollPosition >= nav?.scrollWidth - nav?.clientWidth;

    const handleOverflow = () => {
        const isOverflow = document.querySelector('.overflow-detector')?.clientWidth == 0;
        setOverflow( isOverflow );
    };
    const handleScrollByWheel = (e) => {
        e.preventDefault();
        setScrollPosition( nav.scrollLeft + 2 * e.deltaY)
    };
    const handleScrollRightByButton = () => setScrollPosition( nav.scrollLeft + 200 );
    const handleScrollLeftByButton = () => setScrollPosition( nav.scrollLeft - 200 );
    const scrollNav = () => {
        nav?.scroll({
            left: scrollPosition,
            behavior: 'smooth'
        });
    };

    useLayoutEffect(() => {
        handleOverflow();
        window.addEventListener('resize', handleOverflow);
        return (() => {
            window.removeEventListener('resize', handleOverflow);
        })
    },[])

    useLayoutEffect(() => {
        scrollNav();
        nav?.addEventListener('wheel', handleScrollByWheel);
        return (() => {
            nav?.removeEventListener('wheel', handleScrollByWheel);
        })
    },[scrollPosition])

    // add shadow to navbar when content is scrolling

    const toggleShadow = () => {
        const isConteScrolled = document.querySelector('.work-space').scrollTop;
        if(isConteScrolled) nav.classList.add('with-shadow');
        if(!isConteScrolled) nav.classList.remove('with-shadow');
    }

    return (
        <div className='app-body'>
            <div className='nav-container'>
                <div className='nav-bar'>
                    { overflow && <IconButton
                        icon='arrowLeft'
                        func={ handleScrollLeftByButton }
                        disabled={ isLeftOverflow }
                        className={ isLeftOverflow ? 'nav-scroll left hidden' : 'nav-scroll left' }
                    /> }
                    { overflow && <IconButton
                        icon='arrowRight'
                        func={ handleScrollRightByButton }
                        disabled={ isRightOverflow }
                        className={ isRightOverflow ? 'nav-scroll right hidden' : 'nav-scroll right' }
                    /> }
                    <ModeToggle/>
                    <BreadCrumbs/>
                    <div className='overflow-detector'/>
                </div>
            </div>
            <div className='work-space' onScroll={ toggleShadow }>
                <Outlet/>
            </div>
        </div>
    )
}