import React, { useEffect } from 'react'
import { useDispatch, useSelector } from 'react-redux'

import { AppLayout } from 'containers/AppLayout'
import { WishCard } from 'components/WishCard'
import { fetchWishes } from 'store/wishesSlice'
import { addColumn,
         setWorkSpaceWidth,
         resetColumns,
         fillWaitList,
         takeWishToRender} from 'store/wishColumnSlice'



export const WishCardsLayout = () => {
    const columnObjects = useSelector(state => state.wishColumns.wishColumns);
    const wishes = useSelector(state => state.wishes.wishes);
    console.log('cons wishes is: ', wishes)
    const workSpaceWidth = useSelector(state => state.wishColumns.workSpaceWidth);
    const wishesToRender = useSelector(state => state.wishColumns.wishesToRender);

    const columnHeights = [...document.querySelectorAll('.wish-column')].map(col => col.clientHeight);
    const shortestColumn = columnHeights.indexOf(Math.min(...columnHeights))
    
    console.log('shortestColumn: ', shortestColumn, 'column objects: ', columnObjects);

    const dispatch = useDispatch();
    const loadWishes = () => dispatch(fetchWishes());
    const oneMoreColumnPlease = () => dispatch(addColumn());
    const clearColumns = () => dispatch(resetColumns());
    const updateWidth = () => dispatch(setWorkSpaceWidth(document.querySelector('.work-space').clientWidth));
    const updateRenderWaitList = () => dispatch(fillWaitList( wishes ));
    const putOneWishIn = () => dispatch(takeWishToRender(shortestColumn));
    
    const [outerSpacing, innerSpacing, columnMinimalWidth] = [55, 22, 220];
    const columnsQty = (workSpaceWidth > 0)
        ? Math.floor((workSpaceWidth - 2 * outerSpacing + innerSpacing) / (columnMinimalWidth + innerSpacing))
        : 0;

    useEffect(() => {
        console.log('start fetching...')
        loadWishes();
        console.log('wishes are fetched successfully! wishes: ', wishes);
    },[])

    useEffect(() => {
        updateWidth();
        window.addEventListener('resize', updateWidth);
        clearColumns();
        for (var i=1; i<columnsQty; i++) {
            oneMoreColumnPlease() 
        };
        updateRenderWaitList();

        console.log('columns: ', columnsQty, 'render wait-list: ', wishesToRender, '  shortestColumn: ', shortestColumn);

        return () => { window.removeEventListener('resize', updateWidth) }
    },[columnsQty]);

    useEffect(() => {
        (shortestColumn >= 0) &&  putOneWishIn();
        console.log('one more wish had rendered. ColumnsArray: ', columnObjects, '  shortestColumn: ', shortestColumn);
    },[wishesToRender]);


    const WishColumn = ({ column }) => {
        <div key={column.id} className={'wish-column'}>
            {console.log('До сюда дошли', column.wishes.length)}
            { column.wishes.length ? (column.wishes.map(wish, index => <div key={index} className='wish-mock'></div>)) : <div>column is empty :(</div> }
        </div>
    };

    return (
        <AppLayout>
            {columnObjects.map(column => <div key={column.id} className={'wish-column'}><div className='wish-mock'></div></div>)}
        </AppLayout>
    );
}

//{columnObjects.map(column => <div key={column.id} className={'wish-column'}><div className='wish-mock'></div></div>)}

//{columnObjects.map(column => <WishColumn column={column} key={column.id}/>)}

//{ wishes.map((wish, index) => <WishCard wish={ wish } key={ index }/>) }


